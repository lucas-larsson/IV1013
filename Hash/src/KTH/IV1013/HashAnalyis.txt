lulars@kth.se
    2.1
    Q1   Describe your observations.What differences do you see between the algorithms?
    A1   The algorithms generates different hashes for the same input.
          Two main differences are that the hashes are not even little similar considering they have the same input,
          and the second is that they are of different lengths of 128, 160 and 256 bits respectively for MD5 SHA-1 and Sha-256.


    Q2  Write down the digests generated using the three algorithms.

    A1  ❯ openssl dgst -md5 mail.txt
        MD5(mail.txt)= 1faa3a1fa8fc683e203b6520329db472

        ❯ openssl dgst -sha1 mail.txt
        SHA1(mail.txt)= 761e951719059926e2888892d2ab5ef4c0c7a313

        ❯ openssl dgst -sha256 mail.txt
        SHA2-256(mail.txt)= 95c41de38b802e7d6c8bf60b55cdd35cf4aa7eb29d5580afee0794924df77c8f

    2.2
    Q3  Do we have to use a key with a fixed size in HMAC? If so, what is the key size?If not, why?
    A1  No, the HMAC key can be of any length, cryptographic hash functions "[map] data of arbitrary size to a bit
    string of a fixed size (a hash)". So the key that you input, your password, can be of any size.

    # Hash function
    hmac = hash(
        (key xor opad) +
        hash((key xor ipad) xor message)
    )

    Q4  Now use the string "IV1013-key" as the secret key and write down the keyed hashes generated
        using the three algorithms.
    A4
        ❯ openssl dgst -md5 -hmac "IV1013-key" mail.txt
            HMAC-MD5(mail.txt)= c2584bd6d7a40f692b2eca3834a4a829

        ❯ openssl dgst -sha1 -hmac "IV1013-key" mail.txt
            HMAC-SHA1(mail.txt)= e51dbf4cbf96ce3342f1c597b9393b639c2ed777

        ❯ openssl dgst -sha256 -hmac "IV1013-key" mail.txt
            HMAC-SHA2-256(mail.txt)= 9a81f64b9e299b43f135820c97eb0fe331faae31d170b5e3d923f2f08c01e518

    2.3
    Q5  To understand the properties of one-way hash functions, we would like to do the following exercise for
        MD5 and SHA256:
    A5
        for "lulars@kth.se"

        ❯ openssl dgst -md5 mail.txt
        MD5(mail2.txt)= 1faa3a1fa8fc683e203b6520329db472

        ❯ openssl dgst -sha256 mail.txt
        SHA2-256(mail2.txt)= 95c41de38b802e7d6c8bf60b55cdd35cf4aa7eb29d5580afee0794924df77c8f

        for modified "lulars@kth.se" just flipping the first bit from 0 -> 1

        ❯ openssl dgst -sha256 mail.txt
        SHA2-256(mail.txt)= c5c6ebe60fe187ee9749e00dbbb184ea8afe65a78f5e399ecee6c5b57853aaea

        ❯ openssl dgst -md5 mail.txt
        MD5(mail.txt)= ec593de870d1d2688eeb3e78408a2c17

        A5... Not similar at all, I wrote a Java program to check the similar bits which can be found on my
        git repository:  https://github.com/lucas-larsson/IV1013/blob/Master/Hash/src/KTH/IV1013/BitCounter.java

        A print-out of the program: "[117] different bits of total [256]"

        2.4
        Q6 Investigate how many trials it will take to break the weak collision property using the brute- force method.
        Below is a list of five messages. For each message, report how many trials it took before you could
        find a message with the same hash.
        • IV1013 security
        • Security is fun
        • Yes, indeed
        • Secure IV1013
        • No way

        A6



        ❯ openssl dgst -md5 -hmac "abcdefg" mail.txt
        HMAC-MD5(mail.txt)= 8314755a027e428491ca191056d41f05

        ❯ openssl dgst -sha1 -hmac "abcdefg" mail.txt
        HMAC-SHA1(mail.txt)= 0ccda80e12ab9d8e556eb4ca28804662ffb0176f


        ❯ openssl dgst -sha256 -hmac "abcdefg" mail.txt
        HMAC-SHA2-256(mail.txt)= 66f3fbcab4c573ebfbeb8868965b7eccb834985d2c702018357c2e7b4294312c




        Java program

        Digest for the message "lulars@kth.se", using SHA-256 is:
            49022d321df0bb6c26d155e6454720ac65629ac06e77675f7666b1cc299a5900
        Digest for the message "lulars@kth.se", using SHA-256 is:
            49022d321df0bb6c26d155e6454720ac65629ac06e77675f7666b1cc299a5900
